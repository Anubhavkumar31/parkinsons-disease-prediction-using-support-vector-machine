# -*- coding: utf-8 -*-
"""parkinson's_disease detection .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yg7QGIpubB8tMnXyFFTmlD3oV58cdeFg

importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score

"""data collection and analysis"""

#importing the dataset to a pandas dataframe
parkinsons_data = pd.read_csv('/content/parkinsons.csv')

#printing first  rows of dataframe
parkinsons_data.head()

#number of rows and cols in the dataframe
parkinsons_data.shape

#getting more infor abt dataset
parkinsons_data.info()

#checking for missing values in each col
parkinsons_data.isnull().sum()

#getting some statistical measures abt the data
parkinsons_data.describe()

#distribution of target variable
parkinsons_data['status'].value_counts()

"""0--->not parkinsons
1--->have parkinsons
"""

#grouping the data based on the target variable
parkinsons_data.groupby('status').mean(numeric_only=True)

"""data preprocessing

seperating the features & target
"""

X = parkinsons_data.drop(columns=['name','status'], axis=1)
Y = parkinsons_data['status']

print(X)

print(Y)

"""splitting the data to train and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Data standardization"""

scaler = StandardScaler()

scaler.fit(X_train)

X_train = scaler.transform(X_train)

X_test = scaler.transform(X_test)

print(X_train)

"""model training

SUPPORT VECTOR MACHINE MODEL
"""

model = svm.SVC(kernel='linear')

#training the SVM model with training model
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

#accuracy score on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('accuracy score of training data : ' , training_data_accuracy)

#accuracy score on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('accuracy score of test data : ' , test_data_accuracy)

"""Building predictive system"""

input_data = (197.07600,206.89600,192.05500,0.00289,0.00001,0.00166,0.00168,0.00498,0.01098,0.09700,0.00563,0.00680,0.00802,0.01689,0.00339,26.77500,0.422229,0.741367,-7.348300,0.177551,1.743867,0.085569)

#input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)


#standardize the data
std_data = scaler.transform(input_data_reshaped)

prediction = model.predict(std_data)
print(prediction)

if(prediction[0]==0):
  print("person is healthy")
else:
  print("person has parkinsons")

